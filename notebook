{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d1b52e2d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-25T10:12:08.864819Z",
     "iopub.status.busy": "2024-04-25T10:12:08.864385Z",
     "iopub.status.idle": "2024-04-25T10:12:11.789297Z",
     "shell.execute_reply": "2024-04-25T10:12:11.787878Z"
    },
    "papermill": {
     "duration": 2.933641,
     "end_time": "2024-04-25T10:12:11.791938",
     "exception": false,
     "start_time": "2024-04-25T10:12:08.858297",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/covid19/dataset.xlsx\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from sklearn import datasets\n",
    "import scipy.stats\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.model_selection import GridSearchCV, KFold, train_test_split, ParameterGrid\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.datasets import load_digits\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c879d21e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T10:12:11.802442Z",
     "iopub.status.busy": "2024-04-25T10:12:11.801937Z",
     "iopub.status.idle": "2024-04-25T10:12:13.600118Z",
     "shell.execute_reply": "2024-04-25T10:12:13.598899Z"
    },
    "papermill": {
     "duration": 1.806451,
     "end_time": "2024-04-25T10:12:13.602887",
     "exception": false,
     "start_time": "2024-04-25T10:12:11.796436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "PATH = '/kaggle/input/covid19/dataset.xlsx'\n",
    "data = pd.read_excel(PATH)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "950909a7",
   "metadata": {
    "papermill": {
     "duration": 0.003757,
     "end_time": "2024-04-25T10:12:13.610879",
     "exception": false,
     "start_time": "2024-04-25T10:12:13.607122",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Storing the excel data into a dataframe for a fast response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "53353772",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T10:12:13.620746Z",
     "iopub.status.busy": "2024-04-25T10:12:13.620204Z",
     "iopub.status.idle": "2024-04-25T10:12:13.625937Z",
     "shell.execute_reply": "2024-04-25T10:12:13.624724Z"
    },
    "papermill": {
     "duration": 0.013188,
     "end_time": "2024-04-25T10:12:13.628125",
     "exception": false,
     "start_time": "2024-04-25T10:12:13.614937",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.DataFrame(data)\n",
    "# limiting the column to 5 to show\n",
    "pd.set_option('display.max_columns', 7)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "802d5edd",
   "metadata": {
    "papermill": {
     "duration": 0.003776,
     "end_time": "2024-04-25T10:12:13.636010",
     "exception": false,
     "start_time": "2024-04-25T10:12:13.632234",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First five rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b6a60add",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T10:12:13.645720Z",
     "iopub.status.busy": "2024-04-25T10:12:13.645324Z",
     "iopub.status.idle": "2024-04-25T10:12:13.682731Z",
     "shell.execute_reply": "2024-04-25T10:12:13.681724Z"
    },
    "papermill": {
     "duration": 0.044986,
     "end_time": "2024-04-25T10:12:13.684995",
     "exception": false,
     "start_time": "2024-04-25T10:12:13.640009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient ID</th>\n",
       "      <th>Patient age quantile</th>\n",
       "      <th>SARS-Cov-2 exam result</th>\n",
       "      <th>...</th>\n",
       "      <th>Arteiral Fio2</th>\n",
       "      <th>Phosphor</th>\n",
       "      <th>ctO2 (arterial blood gas analysis)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>44477f75e8169d2</td>\n",
       "      <td>13</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>126e9dd13932f68</td>\n",
       "      <td>17</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>a46b4402a0e5696</td>\n",
       "      <td>8</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>f7d619a94f97c45</td>\n",
       "      <td>5</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>d9e41465789c2b5</td>\n",
       "      <td>15</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 111 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Patient ID  Patient age quantile SARS-Cov-2 exam result  ...  \\\n",
       "0  44477f75e8169d2                    13               negative  ...   \n",
       "1  126e9dd13932f68                    17               negative  ...   \n",
       "2  a46b4402a0e5696                     8               negative  ...   \n",
       "3  f7d619a94f97c45                     5               negative  ...   \n",
       "4  d9e41465789c2b5                    15               negative  ...   \n",
       "\n",
       "   Arteiral Fio2  Phosphor  ctO2 (arterial blood gas analysis)  \n",
       "0            NaN       NaN                                 NaN  \n",
       "1            NaN       NaN                                 NaN  \n",
       "2            NaN       NaN                                 NaN  \n",
       "3            NaN       NaN                                 NaN  \n",
       "4            NaN       NaN                                 NaN  \n",
       "\n",
       "[5 rows x 111 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b4add8d",
   "metadata": {
    "papermill": {
     "duration": 0.004015,
     "end_time": "2024-04-25T10:12:13.693342",
     "exception": false,
     "start_time": "2024-04-25T10:12:13.689327",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Last five rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4c59eb52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T10:12:13.704264Z",
     "iopub.status.busy": "2024-04-25T10:12:13.703144Z",
     "iopub.status.idle": "2024-04-25T10:12:13.718425Z",
     "shell.execute_reply": "2024-04-25T10:12:13.717128Z"
    },
    "papermill": {
     "duration": 0.023214,
     "end_time": "2024-04-25T10:12:13.720772",
     "exception": false,
     "start_time": "2024-04-25T10:12:13.697558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient ID</th>\n",
       "      <th>Patient age quantile</th>\n",
       "      <th>SARS-Cov-2 exam result</th>\n",
       "      <th>...</th>\n",
       "      <th>Arteiral Fio2</th>\n",
       "      <th>Phosphor</th>\n",
       "      <th>ctO2 (arterial blood gas analysis)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5639</th>\n",
       "      <td>ae66feb9e4dc3a0</td>\n",
       "      <td>3</td>\n",
       "      <td>positive</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5640</th>\n",
       "      <td>517c2834024f3ea</td>\n",
       "      <td>17</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5641</th>\n",
       "      <td>5c57d6037fe266d</td>\n",
       "      <td>4</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5642</th>\n",
       "      <td>c20c44766f28291</td>\n",
       "      <td>10</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5643</th>\n",
       "      <td>2697fdccbfeb7f7</td>\n",
       "      <td>19</td>\n",
       "      <td>positive</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 111 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Patient ID  Patient age quantile SARS-Cov-2 exam result  ...  \\\n",
       "5639  ae66feb9e4dc3a0                     3               positive  ...   \n",
       "5640  517c2834024f3ea                    17               negative  ...   \n",
       "5641  5c57d6037fe266d                     4               negative  ...   \n",
       "5642  c20c44766f28291                    10               negative  ...   \n",
       "5643  2697fdccbfeb7f7                    19               positive  ...   \n",
       "\n",
       "      Arteiral Fio2  Phosphor  ctO2 (arterial blood gas analysis)  \n",
       "5639            NaN       NaN                                 NaN  \n",
       "5640            NaN       NaN                                 NaN  \n",
       "5641            NaN       NaN                                 NaN  \n",
       "5642            NaN       NaN                                 NaN  \n",
       "5643            NaN       NaN                                 NaN  \n",
       "\n",
       "[5 rows x 111 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d4253d2",
   "metadata": {
    "papermill": {
     "duration": 0.004248,
     "end_time": "2024-04-25T10:12:13.729649",
     "exception": false,
     "start_time": "2024-04-25T10:12:13.725401",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Showing the size of the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "79b2888e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T10:12:13.742142Z",
     "iopub.status.busy": "2024-04-25T10:12:13.741037Z",
     "iopub.status.idle": "2024-04-25T10:12:13.747042Z",
     "shell.execute_reply": "2024-04-25T10:12:13.745741Z"
    },
    "papermill": {
     "duration": 0.014079,
     "end_time": "2024-04-25T10:12:13.749254",
     "exception": false,
     "start_time": "2024-04-25T10:12:13.735175",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The data has 5644 rows and 111 columns.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(f'The data has {data.shape[0]} rows and {data.shape[1]} columns.\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "269f62be",
   "metadata": {
    "papermill": {
     "duration": 0.004274,
     "end_time": "2024-04-25T10:12:13.758576",
     "exception": false,
     "start_time": "2024-04-25T10:12:13.754302",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Simple way to show the amount of patients that have been tested using the aggregate function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "34a70079",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T10:12:13.769328Z",
     "iopub.status.busy": "2024-04-25T10:12:13.768932Z",
     "iopub.status.idle": "2024-04-25T10:12:13.788096Z",
     "shell.execute_reply": "2024-04-25T10:12:13.786880Z"
    },
    "papermill": {
     "duration": 0.027346,
     "end_time": "2024-04-25T10:12:13.790407",
     "exception": false,
     "start_time": "2024-04-25T10:12:13.763061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SARS-Cov-2 exam result</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>negative</th>\n",
       "      <td>5086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>positive</th>\n",
       "      <td>558</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        count\n",
       "SARS-Cov-2 exam result       \n",
       "negative                 5086\n",
       "positive                  558"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['count'] = 1\n",
    "df.groupby('SARS-Cov-2 exam result').agg({'count': 'sum'})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "520d4942",
   "metadata": {
    "papermill": {
     "duration": 0.00458,
     "end_time": "2024-04-25T10:12:13.799949",
     "exception": false,
     "start_time": "2024-04-25T10:12:13.795369",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing the data into training and validation sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2bfdd80a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T10:12:13.813256Z",
     "iopub.status.busy": "2024-04-25T10:12:13.812035Z",
     "iopub.status.idle": "2024-04-25T10:12:14.420532Z",
     "shell.execute_reply": "2024-04-25T10:12:14.419324Z"
    },
    "papermill": {
     "duration": 0.618193,
     "end_time": "2024-04-25T10:12:14.423203",
     "exception": false,
     "start_time": "2024-04-25T10:12:13.805010",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data1 = data.select_dtypes(include=['number'])\n",
    "\n",
    "missing_values = data1.isnull().sum()\n",
    "\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "\n",
    "data_imputed = imputer.fit_transform(data1)\n",
    "\n",
    "data_imputed\n",
    "\n",
    "data_cleaned = pd.DataFrame(data_imputed,columns=data1.columns[:69])\n",
    "data_cleaned\n",
    "\n",
    "data_cleaned.columns\n",
    "\n",
    "missing_values_after_imputation = data_cleaned.isnull().sum()\n",
    "\n",
    "X = data_cleaned\n",
    "y = data['SARS-Cov-2 exam result']\n",
    "\n",
    "\n",
    "\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.3, shuffle=True, random_state=1)\n",
    "\n",
    "scaler = StandardScaler() # Create a `StandardScaler`\n",
    "X_train_scaled = scaler.fit_transform(X_train) # Use `scaler` to fit and transform to `X_train`\n",
    "X_valid_scaled = scaler.transform(X_valid) # Use `scaler` to transform to `X_valid`\n",
    "\n",
    "model = RandomForestClassifier(random_state=42)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "RandomForestClassifier\n",
    "\n",
    "RandomForestClassifier(random_state=42)\n",
    "\n",
    "y_pred = model.predict(X_valid)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6253f2b0",
   "metadata": {
    "papermill": {
     "duration": 0.004712,
     "end_time": "2024-04-25T10:12:14.433691",
     "exception": false,
     "start_time": "2024-04-25T10:12:14.428979",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Performance metric stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3251615d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T10:12:14.446399Z",
     "iopub.status.busy": "2024-04-25T10:12:14.446039Z",
     "iopub.status.idle": "2024-04-25T10:12:14.516623Z",
     "shell.execute_reply": "2024-04-25T10:12:14.515252Z"
    },
    "papermill": {
     "duration": 0.079919,
     "end_time": "2024-04-25T10:12:14.519039",
     "exception": false,
     "start_time": "2024-04-25T10:12:14.439120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.911452184179457\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    negative       0.91      1.00      0.95      1536\n",
      "    positive       1.00      0.05      0.10       158\n",
      "\n",
      "    accuracy                           0.91      1694\n",
      "   macro avg       0.96      0.53      0.52      1694\n",
      "weighted avg       0.92      0.91      0.87      1694\n",
      "\n"
     ]
    }
   ],
   "source": [
    "accuracy = accuracy_score(y_valid, y_pred)\n",
    "report = classification_report(y_valid, y_pred)\n",
    "\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"Classification Report:\\n\", report)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 574076,
     "sourceId": 1040311,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.17186,
   "end_time": "2024-04-25T10:12:15.244861",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-25T10:12:06.073001",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
