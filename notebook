{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6ae65047",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-25T14:38:12.751499Z",
     "iopub.status.busy": "2024-04-25T14:38:12.751033Z",
     "iopub.status.idle": "2024-04-25T14:38:15.978649Z",
     "shell.execute_reply": "2024-04-25T14:38:15.977256Z"
    },
    "papermill": {
     "duration": 3.240484,
     "end_time": "2024-04-25T14:38:15.981396",
     "exception": false,
     "start_time": "2024-04-25T14:38:12.740912",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/covid19/dataset.xlsx\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from sklearn import datasets\n",
    "import scipy.stats\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.model_selection import GridSearchCV, KFold, train_test_split, ParameterGrid\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.datasets import load_digits\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3ff8b6a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:38:15.998199Z",
     "iopub.status.busy": "2024-04-25T14:38:15.997622Z",
     "iopub.status.idle": "2024-04-25T14:38:18.537886Z",
     "shell.execute_reply": "2024-04-25T14:38:18.536837Z"
    },
    "papermill": {
     "duration": 2.551827,
     "end_time": "2024-04-25T14:38:18.540593",
     "exception": false,
     "start_time": "2024-04-25T14:38:15.988766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "PATH = '/kaggle/input/covid19/dataset.xlsx'\n",
    "data = pd.read_excel(PATH)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7248c4ad",
   "metadata": {
    "papermill": {
     "duration": 0.006682,
     "end_time": "2024-04-25T14:38:18.554525",
     "exception": false,
     "start_time": "2024-04-25T14:38:18.547843",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Storing the data into a dataframe for a fast response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2de21509",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:38:18.571210Z",
     "iopub.status.busy": "2024-04-25T14:38:18.569897Z",
     "iopub.status.idle": "2024-04-25T14:38:18.575623Z",
     "shell.execute_reply": "2024-04-25T14:38:18.574763Z"
    },
    "papermill": {
     "duration": 0.016133,
     "end_time": "2024-04-25T14:38:18.577688",
     "exception": false,
     "start_time": "2024-04-25T14:38:18.561555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.DataFrame(data)\n",
    "# limiting the column to 7 to show\n",
    "pd.set_option('display.max_columns', 7)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abe0d5c4",
   "metadata": {
    "papermill": {
     "duration": 0.006586,
     "end_time": "2024-04-25T14:38:18.591247",
     "exception": false,
     "start_time": "2024-04-25T14:38:18.584661",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First five rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "361143d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:38:18.607239Z",
     "iopub.status.busy": "2024-04-25T14:38:18.606472Z",
     "iopub.status.idle": "2024-04-25T14:38:18.646850Z",
     "shell.execute_reply": "2024-04-25T14:38:18.645535Z"
    },
    "papermill": {
     "duration": 0.051336,
     "end_time": "2024-04-25T14:38:18.649499",
     "exception": false,
     "start_time": "2024-04-25T14:38:18.598163",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient ID</th>\n",
       "      <th>Patient age quantile</th>\n",
       "      <th>SARS-Cov-2 exam result</th>\n",
       "      <th>...</th>\n",
       "      <th>Arteiral Fio2</th>\n",
       "      <th>Phosphor</th>\n",
       "      <th>ctO2 (arterial blood gas analysis)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>44477f75e8169d2</td>\n",
       "      <td>13</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>126e9dd13932f68</td>\n",
       "      <td>17</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>a46b4402a0e5696</td>\n",
       "      <td>8</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>f7d619a94f97c45</td>\n",
       "      <td>5</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>d9e41465789c2b5</td>\n",
       "      <td>15</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 111 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Patient ID  Patient age quantile SARS-Cov-2 exam result  ...  \\\n",
       "0  44477f75e8169d2                    13               negative  ...   \n",
       "1  126e9dd13932f68                    17               negative  ...   \n",
       "2  a46b4402a0e5696                     8               negative  ...   \n",
       "3  f7d619a94f97c45                     5               negative  ...   \n",
       "4  d9e41465789c2b5                    15               negative  ...   \n",
       "\n",
       "   Arteiral Fio2  Phosphor  ctO2 (arterial blood gas analysis)  \n",
       "0            NaN       NaN                                 NaN  \n",
       "1            NaN       NaN                                 NaN  \n",
       "2            NaN       NaN                                 NaN  \n",
       "3            NaN       NaN                                 NaN  \n",
       "4            NaN       NaN                                 NaN  \n",
       "\n",
       "[5 rows x 111 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74f4738e",
   "metadata": {
    "papermill": {
     "duration": 0.007257,
     "end_time": "2024-04-25T14:38:18.664232",
     "exception": false,
     "start_time": "2024-04-25T14:38:18.656975",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Last five rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "abef312b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:38:18.681549Z",
     "iopub.status.busy": "2024-04-25T14:38:18.680807Z",
     "iopub.status.idle": "2024-04-25T14:38:18.695900Z",
     "shell.execute_reply": "2024-04-25T14:38:18.694705Z"
    },
    "papermill": {
     "duration": 0.026715,
     "end_time": "2024-04-25T14:38:18.698399",
     "exception": false,
     "start_time": "2024-04-25T14:38:18.671684",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient ID</th>\n",
       "      <th>Patient age quantile</th>\n",
       "      <th>SARS-Cov-2 exam result</th>\n",
       "      <th>...</th>\n",
       "      <th>Arteiral Fio2</th>\n",
       "      <th>Phosphor</th>\n",
       "      <th>ctO2 (arterial blood gas analysis)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5639</th>\n",
       "      <td>ae66feb9e4dc3a0</td>\n",
       "      <td>3</td>\n",
       "      <td>positive</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5640</th>\n",
       "      <td>517c2834024f3ea</td>\n",
       "      <td>17</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5641</th>\n",
       "      <td>5c57d6037fe266d</td>\n",
       "      <td>4</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5642</th>\n",
       "      <td>c20c44766f28291</td>\n",
       "      <td>10</td>\n",
       "      <td>negative</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5643</th>\n",
       "      <td>2697fdccbfeb7f7</td>\n",
       "      <td>19</td>\n",
       "      <td>positive</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 111 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Patient ID  Patient age quantile SARS-Cov-2 exam result  ...  \\\n",
       "5639  ae66feb9e4dc3a0                     3               positive  ...   \n",
       "5640  517c2834024f3ea                    17               negative  ...   \n",
       "5641  5c57d6037fe266d                     4               negative  ...   \n",
       "5642  c20c44766f28291                    10               negative  ...   \n",
       "5643  2697fdccbfeb7f7                    19               positive  ...   \n",
       "\n",
       "      Arteiral Fio2  Phosphor  ctO2 (arterial blood gas analysis)  \n",
       "5639            NaN       NaN                                 NaN  \n",
       "5640            NaN       NaN                                 NaN  \n",
       "5641            NaN       NaN                                 NaN  \n",
       "5642            NaN       NaN                                 NaN  \n",
       "5643            NaN       NaN                                 NaN  \n",
       "\n",
       "[5 rows x 111 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "875f7297",
   "metadata": {
    "papermill": {
     "duration": 0.007301,
     "end_time": "2024-04-25T14:38:18.713352",
     "exception": false,
     "start_time": "2024-04-25T14:38:18.706051",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Showing the size of rows and columns to showcase the density of the data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dad06c1d",
   "metadata": {
    "papermill": {
     "duration": 0.008592,
     "end_time": "2024-04-25T14:38:18.729558",
     "exception": false,
     "start_time": "2024-04-25T14:38:18.720966",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Simple way to show the amount of patients that have been tested using the aggregate function with the function groupby"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fe50162b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:38:18.747159Z",
     "iopub.status.busy": "2024-04-25T14:38:18.746378Z",
     "iopub.status.idle": "2024-04-25T14:38:18.766092Z",
     "shell.execute_reply": "2024-04-25T14:38:18.764941Z"
    },
    "papermill": {
     "duration": 0.031409,
     "end_time": "2024-04-25T14:38:18.768579",
     "exception": false,
     "start_time": "2024-04-25T14:38:18.737170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SARS-Cov-2 exam result</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>negative</th>\n",
       "      <td>5086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>positive</th>\n",
       "      <td>558</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        count\n",
       "SARS-Cov-2 exam result       \n",
       "negative                 5086\n",
       "positive                  558"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['count'] = 1\n",
    "df.groupby('SARS-Cov-2 exam result').agg({'count': 'sum'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "04f9f4b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:38:18.786457Z",
     "iopub.status.busy": "2024-04-25T14:38:18.785823Z",
     "iopub.status.idle": "2024-04-25T14:38:19.674557Z",
     "shell.execute_reply": "2024-04-25T14:38:19.673383Z"
    },
    "papermill": {
     "duration": 0.900449,
     "end_time": "2024-04-25T14:38:19.676897",
     "exception": false,
     "start_time": "2024-04-25T14:38:18.776448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The data has 5644 rows and 111 columns.\n",
      "\n",
      "The percentage of missing values is: 88.1%\n",
      "Percentage of positive cases: 9.9%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/3341639468.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  print(f'Percentage of positive cases: {data[\"SARS-Cov-2 exam result\"].value_counts()[1]/data.shape[0]*100:.1f}%')\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(f'The data has {data.shape[0]} rows and {data.shape[1]} columns.\\n')\n",
    "\n",
    "total_na_percentage = data.isna().sum().sum() / (data.shape[0] * data.shape[1]) * 100\n",
    "print(f'The percentage of missing values is: {total_na_percentage:.1f}%')\n",
    "print(f'Percentage of positive cases: {data[\"SARS-Cov-2 exam result\"].value_counts()[1]/data.shape[0]*100:.1f}%')\n",
    "fig, axes = plt.subplots(figsize=(15, 5))\n",
    "axes.bar(data.columns, data.isna().sum()/data.shape[0]*100)\n",
    "axes.set_title('% of missing values per column')\n",
    "axes.set_xlabel('Columns')\n",
    "axes.set_ylabel('% of missing values')\n",
    "axes.set_xticklabels([])  # Hide x-axis labels\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b883fe6",
   "metadata": {
    "papermill": {
     "duration": 0.008046,
     "end_time": "2024-04-25T14:38:19.693264",
     "exception": false,
     "start_time": "2024-04-25T14:38:19.685218",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Simplifying the missing values with a different strategy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b3239acd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:38:19.714807Z",
     "iopub.status.busy": "2024-04-25T14:38:19.714001Z",
     "iopub.status.idle": "2024-04-25T14:38:19.773061Z",
     "shell.execute_reply": "2024-04-25T14:38:19.772187Z"
    },
    "papermill": {
     "duration": 0.074518,
     "end_time": "2024-04-25T14:38:19.776177",
     "exception": false,
     "start_time": "2024-04-25T14:38:19.701659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data1 = data.select_dtypes(include=['number'])\n",
    "\n",
    "missing_values = data.isna().sum().sum() / (data.shape[0] * data.shape[1]) * 100\n",
    "\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "\n",
    "data_imputed = imputer.fit_transform(data1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3969cf19",
   "metadata": {
    "papermill": {
     "duration": 0.008806,
     "end_time": "2024-04-25T14:38:19.796251",
     "exception": false,
     "start_time": "2024-04-25T14:38:19.787445",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Cleaning the data by imputing such that it replaces the missing values with substituted values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "495b1cd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:38:19.815645Z",
     "iopub.status.busy": "2024-04-25T14:38:19.814410Z",
     "iopub.status.idle": "2024-04-25T14:38:19.821551Z",
     "shell.execute_reply": "2024-04-25T14:38:19.820659Z"
    },
    "papermill": {
     "duration": 0.01903,
     "end_time": "2024-04-25T14:38:19.823764",
     "exception": false,
     "start_time": "2024-04-25T14:38:19.804734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_cleaned = pd.DataFrame(data_imputed,columns=data1.columns[:69])\n",
    "\n",
    "data_cleaned.columns\n",
    "\n",
    "missing_values_after_imputation = data_cleaned.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ba019ad",
   "metadata": {
    "papermill": {
     "duration": 0.008075,
     "end_time": "2024-04-25T14:38:19.840432",
     "exception": false,
     "start_time": "2024-04-25T14:38:19.832357",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing the data into training and validation sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ec97baf6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:38:19.859447Z",
     "iopub.status.busy": "2024-04-25T14:38:19.858674Z",
     "iopub.status.idle": "2024-04-25T14:38:20.506350Z",
     "shell.execute_reply": "2024-04-25T14:38:20.505473Z"
    },
    "papermill": {
     "duration": 0.660007,
     "end_time": "2024-04-25T14:38:20.509022",
     "exception": false,
     "start_time": "2024-04-25T14:38:19.849015",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = data_cleaned\n",
    "y = data['SARS-Cov-2 exam result']\n",
    "\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.3, shuffle=True, random_state=1)\n",
    "\n",
    "scaler = StandardScaler() # Create a `StandardScaler`\n",
    "X_train_scaled = scaler.fit_transform(X_train) # Use `scaler` to fit and transform to `X_train`\n",
    "X_valid_scaled = scaler.transform(X_valid) # Use `scaler` to transform to `X_valid`\n",
    "\n",
    "model = RandomForestClassifier(random_state=42)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "RandomForestClassifier\n",
    "\n",
    "RandomForestClassifier(random_state=42)\n",
    "\n",
    "y_pred = model.predict(X_valid)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c0c21f3",
   "metadata": {
    "papermill": {
     "duration": 0.008117,
     "end_time": "2024-04-25T14:38:20.525623",
     "exception": false,
     "start_time": "2024-04-25T14:38:20.517506",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using cross validation to show the accuracy of the predictive model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a08e2163",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:38:20.543888Z",
     "iopub.status.busy": "2024-04-25T14:38:20.543515Z",
     "iopub.status.idle": "2024-04-25T14:38:28.039230Z",
     "shell.execute_reply": "2024-04-25T14:38:28.038026Z"
    },
    "papermill": {
     "duration": 7.507986,
     "end_time": "2024-04-25T14:38:28.041764",
     "exception": false,
     "start_time": "2024-04-25T14:38:20.533778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross Validation Scores:  [0.99115044 0.98761062 0.90265487 0.92566372 0.95567376 0.94503546\n",
      " 0.92198582 0.90248227 0.86879433 0.61524823]\n",
      "Average CV Score: 90% \n",
      "Number of CV Scores used in Average:  10\n"
     ]
    }
   ],
   "source": [
    "kf = KFold(n_splits = 10)\n",
    "\n",
    "scores = cross_val_score(model, X, y, cv = kf)\n",
    "\n",
    "print(\"Cross Validation Scores: \", scores)\n",
    "print(f'Average CV Score: {round(scores.mean() * 100)}% ')\n",
    "print(\"Number of CV Scores used in Average: \", len(scores))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be4d4ef1",
   "metadata": {
    "papermill": {
     "duration": 0.008203,
     "end_time": "2024-04-25T14:38:28.058609",
     "exception": false,
     "start_time": "2024-04-25T14:38:28.050406",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Performance metric stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2164cd51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-25T14:38:28.078101Z",
     "iopub.status.busy": "2024-04-25T14:38:28.077443Z",
     "iopub.status.idle": "2024-04-25T14:38:28.186490Z",
     "shell.execute_reply": "2024-04-25T14:38:28.185294Z"
    },
    "papermill": {
     "duration": 0.121796,
     "end_time": "2024-04-25T14:38:28.189124",
     "exception": false,
     "start_time": "2024-04-25T14:38:28.067328",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    negative       0.91      1.00      0.95      1536\n",
      "    positive       1.00      0.05      0.10       158\n",
      "\n",
      "    accuracy                           0.91      1694\n",
      "   macro avg       0.96      0.53      0.52      1694\n",
      "weighted avg       0.92      0.91      0.87      1694\n",
      "\n",
      "Accuracy: 0.911452184179457\n"
     ]
    }
   ],
   "source": [
    "accuracy = accuracy_score(y_valid, y_pred)\n",
    "report = classification_report(y_valid, y_pred)\n",
    "\n",
    "print(\"Classification Report:\\n\", report)\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 574076,
     "sourceId": 1040311,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 19.210545,
   "end_time": "2024-04-25T14:38:28.919529",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-25T14:38:09.708984",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
